TRUE ~ "other"
))
input = input %>%
mutate(cov_n_disorder_group =
case_when((cov_n_disorder==0) ~ "0",
(cov_n_disorder>=1 & cov_n_disorder<=5) ~ "1-6",
(cov_n_disorder>=6) ~ "6+",
TRUE ~ "other"
))
#Create vector of covariate names
covar_names <- input %>% dplyr::select(c(names(input)[grepl("cov_", names(input))])) %>% names()
covar_names=covar_names[! covar_names %in% c('cov_age','cov_deprivation',"cov_n_disorder")]
#Whole population dataset
whole_pop=input %>% dplyr::select(c(covar_names))#select relevant columns
whole_pop= whole_pop %>% mutate_if(is.numeric,as.factor)#convert all variables to factor
whole_pop= whole_pop %>% mutate_if(is.character,as.factor)#convert all variables to factor
whole_pop=as.data.frame(summary(whole_pop,maxsum=50))
whole_pop = rename(whole_pop, Covariate_level = Freq, Covariate = Var2)
whole_pop$Cov_frequency_all=whole_pop$Covariate_level
whole_pop$Covariate_level= sub('\\:.*', '', whole_pop$Covariate_level)#Remove everything after :
whole_pop$Covariate_level=gsub("\\s","",whole_pop$Covariate_level)#Remove spaces
whole_pop$Covariate=gsub("\\s","",whole_pop$Covariate)#Remove spaces
whole_pop$Cov_frequency_all=gsub(".*:", "",whole_pop$Cov_frequency_all)#Remove everything before:
whole_pop=whole_pop %>% drop_na(Covariate_level)#Remove rows with NA
whole_pop$Cov_frequency_all=as.numeric(whole_pop$Cov_frequency_all)
whole_pop=whole_pop%>%select(Covariate,Covariate_level,Cov_frequency_all)
#Covid exposed population
exposed_pop=input %>% filter(is.na(exp_confirmed_covid19_date)==F)%>%dplyr::select(c(covar_names))#select relevant columns
exposed_pop= exposed_pop %>% mutate_if(is.numeric,as.factor)#convert all variables to factor
exposed_pop= exposed_pop %>% mutate_if(is.character,as.factor)#convert all variables to factor
exposed_pop=as.data.frame(summary(exposed_pop,maxsum=50))
exposed_pop = rename(exposed_pop, Covariate_level = Freq, Covariate = Var2)
exposed_pop$Cov_frequency_covid=exposed_pop$Covariate_level
exposed_pop$Covariate_level= sub('\\:.*', '', exposed_pop$Covariate_level)#Remove everything after :
exposed_pop$Covariate_level=gsub("\\s","",exposed_pop$Covariate_level)#Remove spaces
exposed_pop$Covariate=gsub("\\s","",exposed_pop$Covariate)#Remove spaces
exposed_pop$Cov_frequency_covid=gsub(".*:", "",exposed_pop$Cov_frequency_covid)#Remove everything before:
exposed_pop=exposed_pop %>% drop_na(Covariate_level)#Remove rows with NA
exposed_pop$Cov_frequency_covid=as.numeric(exposed_pop$Cov_frequency_covid)
exposed_pop=exposed_pop%>%select(Covariate,Covariate_level,Cov_frequency_covid)
#Left join exposed population onto whole population
whole_pop=left_join(whole_pop,exposed_pop, by=c("Covariate","Covariate_level"))
whole_pop["Cov_frequency_all"][is.na(whole_pop["Cov_frequency_all"])] <- 0#change any NAs to 0 (shouldb't be any NAs with whole population)
whole_pop["Cov_frequency_covid"][is.na(whole_pop["Cov_frequency_covid"])] <- 0
#Add counts for all
count_all=whole_pop%>%filter(Covariate=="cov_sex")
count_all$Cov_frequency_all=sum(count_all$Cov_frequency_all)
count_all$Cov_frequency_covid=sum(count_all$Cov_frequency_covid)
count_all=count_all[1,]
count_all$Covariate="All"
count_all$Covariate_level="All"
whole_pop=rbind(count_all,whole_pop)
#write.csv(whole_pop, file = file.path("output", paste0("Table_1_general_pop", ".csv")) , row.names=F)
View(whole_pop)
View(whole_pop)
setwd("~/GitHub/post-covid-vaccinated")
df <- arrow::read_feather(file = "output/input.feather")
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("covid_vax_",colnames(df))], # Vaccinations
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))])] # Quality assurance
date_variables <-  c(colnames(df)[grepl("_date",colnames(df))], # Other date variables
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))]) # Outcomes
df[,death_date]
df[,"death_date"]
df[,"death_date"] = as.Date(df[,"death_date"])
i="death_date"
<- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("covid_vax_",colnames(df))], # Vaccinations
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))])] # Quality assurance
# Convert dates to date format -------------------------------------------------
date_variables <-  c(colnames(df)[grepl("_date",colnames(df))], # Other date variables
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))]) # Outcomes
df[,i] <- as.Date(df[,i])
for (i in date_variables) {
df[,i] <- as.Date(df[,i])
}
df <- arrow::read_feather(file = "output/input.feather")
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("covid_vax_",colnames(df))], # Vaccinations
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))])] # Quality assurance
date_variables <-  c(colnames(df)[grepl("_date",colnames(df))], # Other date variables
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))]) # Outcomes
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("covid_vax_",colnames(df))], # Vaccinations
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))])] # Quality assurance
df <- arrow::read_feather(file = "output/input.feather")
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("covid_vax_",colnames(df))], # Vaccinations
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))])] # Quality assurance
date_variables <-  c(colnames(df)[grepl("_date",colnames(df))], # Other date variables
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))]) # Outcomes
for (i in date_variables) {
df[,i] <- as.Date(df[,i])
}
df <- arrow::read_feather(file = "output/input.feather")
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("covid_vax_",colnames(df))], # Vaccinations
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))])] # Quality assurance
date_variables <-  c(colnames(df)[grepl("_date",colnames(df))], # Other date variables
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))]) # Outcomes
for (i in date_variables) {
df[,i] <- as.Date(df[,i])
}
# Load study definition output -------------------------------------------------
df <- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))], # Quality assurance
colnames(df)[grepl("vax_",colnames(df))])] # Vaccinations
# Remove JCVI age variables ----------------------------------------------------
df[,c("vax_jcvi_age_1","vax_jcvi_age_2")] <- NULL
# Convert dates to date format -------------------------------------------------
for (i in colnames(df)[grepl("_date",colnames(df))]) {
df[,i] <- as.Date(df[,i])
}
# Convert numbers to number format ---------------------------------------------
df$qa_num_birth_year <- format(df$qa_num_birth_year,"%Y")
for (i in colnames(df)[grepl("_num",colnames(df))]) {
df[,i] <- as.numeric(df[,i])
}
# Convert categories to factor format ------------------------------------------
for (i in colnames(df)[grepl("_cat",colnames(df))]) {
df[,i] <- as.factor(df[,i])
}
# Convert binaries to logical format -------------------------------------------
for (i in colnames(df)[grepl("_bin",colnames(df))]) {
df[,i] <- as.logical(df[,i])
}
# Generate vaccine variables ---------------------------------------------------
for (i in 1:3) {
# Restrict to relevant columns and rename
tmp <- df[,c("patient_id",paste0(c("vax_date_covid_","vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i))]
colnames(tmp) <- c("patient_id","vax_date_covid","vax_date_AstraZeneca","vax_date_Pfizer","vax_date_Moderna")
# Determine vaccination product
tmp$vax_cat_product <- NA
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid==tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"AstraZeneca",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid==tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"Pfizer",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid==tmp$vax_date_Moderna,"Moderna",tmp$vax_cat_product)
# Add information to main data
tmp <- tmp[,c("patient_id","vax_cat_product")]
colnames(tmp) <- c("patient_id",paste0("vax_cat_product_",i))
df <- merge(df, tmp, by = "patient_id")
# Remove unnecessary vaccination product information
df[,paste0(c("vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i)] <- NULL
}
View(df)
df$exp_bin_covid19_hospital-df$exp_bin_covid19_confirmed
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed
# Load study definition output -------------------------------------------------
df <- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))], # Quality assurance
colnames(df)[grepl("vax_",colnames(df))])] # Vaccinations
# Remove JCVI age variables ----------------------------------------------------
df[,c("vax_jcvi_age_1","vax_jcvi_age_2")] <- NULL
# Convert dates to date format -------------------------------------------------
for (i in colnames(df)[grepl("_date",colnames(df))]) {
df[,i] <- as.Date(df[,i])
}
# Convert numbers to number format ---------------------------------------------
df$qa_num_birth_year <- format(df$qa_num_birth_year,"%Y")
for (i in colnames(df)[grepl("_num",colnames(df))]) {
df[,i] <- as.numeric(df[,i])
}
# Convert categories to factor format ------------------------------------------
for (i in colnames(df)[grepl("_cat",colnames(df))]) {
df[,i] <- as.factor(df[,i])
}
# Convert binaries to logical format -------------------------------------------
for (i in colnames(df)[grepl("_bin",colnames(df))]) {
df[,i] <- as.logical(df[,i])
}
# Generate vaccine variables ---------------------------------------------------
for (i in 1:3) {
# Restrict to relevant columns and rename
tmp <- df[,c("patient_id",paste0(c("vax_date_covid_","vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i))]
colnames(tmp) <- c("patient_id","vax_date_covid","vax_date_AstraZeneca","vax_date_Pfizer","vax_date_Moderna")
# Determine vaccination product
tmp$vax_cat_product <- NA
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid==tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"AstraZeneca",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid==tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"Pfizer",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid==tmp$vax_date_Moderna,"Moderna",tmp$vax_cat_product)
# Add information to main data
tmp <- tmp[,c("patient_id","vax_cat_product")]
colnames(tmp) <- c("patient_id",paste0("vax_cat_product_",i))
df <- merge(df, tmp, by = "patient_id")
# Remove unnecessary vaccination product information
df[,paste0(c("vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i)] <- NULL
}
# Define severity --------------------------------------------------------------
df$exp_bin_covid19_hospital <- "no_infection"
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed),"non_hospitalised")
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=0 &
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed<29),"hospitalised")
df$exp_bin_covid19_hospital <- "no_infection"
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed),"non_hospitalised",df$exp_bin_covid19_hospital)
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=0 &
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed<29),"hospitalised",df$exp_bin_covid19_hospital)
# Load study definition output -------------------------------------------------
df <- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))], # Quality assurance
colnames(df)[grepl("vax_",colnames(df))])] # Vaccinations
# Remove JCVI age variables ----------------------------------------------------
df[,c("vax_jcvi_age_1","vax_jcvi_age_2")] <- NULL
# Convert dates to date format -------------------------------------------------
for (i in colnames(df)[grepl("_date",colnames(df))]) {
df[,i] <- as.Date(df[,i])
}
# Convert numbers to number format ---------------------------------------------
df$qa_num_birth_year <- format(df$qa_num_birth_year,"%Y")
for (i in colnames(df)[grepl("_num",colnames(df))]) {
df[,i] <- as.numeric(df[,i])
}
# Convert categories to factor format ------------------------------------------
for (i in colnames(df)[grepl("_cat",colnames(df))]) {
df[,i] <- as.factor(df[,i])
}
# Convert binaries to logical format -------------------------------------------
for (i in colnames(df)[grepl("_bin",colnames(df))]) {
df[,i] <- as.logical(df[,i])
}
# Generate vaccine variables ---------------------------------------------------
for (i in 1:3) {
# Restrict to relevant columns and rename
tmp <- df[,c("patient_id",paste0(c("vax_date_covid_","vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i))]
colnames(tmp) <- c("patient_id","vax_date_covid","vax_date_AstraZeneca","vax_date_Pfizer","vax_date_Moderna")
# Determine vaccination product
tmp$vax_cat_product <- NA
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid==tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"AstraZeneca",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid==tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"Pfizer",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid==tmp$vax_date_Moderna,"Moderna",tmp$vax_cat_product)
# Add information to main data
tmp <- tmp[,c("patient_id","vax_cat_product")]
colnames(tmp) <- c("patient_id",paste0("vax_cat_product_",i))
df <- merge(df, tmp, by = "patient_id")
# Remove unnecessary vaccination product information
df[,paste0(c("vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i)] <- NULL
}
# Define severity --------------------------------------------------------------
df$exp_bin_covid19_hospital <- "no_infection"
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed),"non_hospitalised",df$exp_bin_covid19_hospital)
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=0 &
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed<29),"hospitalised",df$exp_bin_covid19_hospital)
tmp <- df
# Load study definition output -------------------------------------------------
df <- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))], # Quality assurance
colnames(df)[grepl("vax_",colnames(df))])] # Vaccinations
# Remove JCVI age variables ----------------------------------------------------
df[,c("vax_jcvi_age_1","vax_jcvi_age_2")] <- NULL
# Convert dates to date format -------------------------------------------------
for (i in colnames(df)[grepl("_date",colnames(df))]) {
df[,i] <- as.Date(df[,i])
}
# Convert numbers to number format ---------------------------------------------
df$qa_num_birth_year <- format(df$qa_num_birth_year,"%Y")
for (i in colnames(df)[grepl("_num",colnames(df))]) {
df[,i] <- as.numeric(df[,i])
}
# Convert categories to factor format ------------------------------------------
for (i in colnames(df)[grepl("_cat",colnames(df))]) {
df[,i] <- as.factor(df[,i])
}
# Convert binaries to logical format -------------------------------------------
for (i in colnames(df)[grepl("_bin",colnames(df))]) {
df[,i] <- as.logical(df[,i])
}
# Generate vaccine variables ---------------------------------------------------
for (i in 1:3) {
# Restrict to relevant columns and rename
tmp <- df[,c("patient_id",paste0(c("vax_date_covid_","vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i))]
colnames(tmp) <- c("patient_id","vax_date_covid","vax_date_AstraZeneca","vax_date_Pfizer","vax_date_Moderna")
# Determine vaccination product
tmp$vax_cat_product <- NA
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid==tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"AstraZeneca",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid==tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"Pfizer",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid==tmp$vax_date_Moderna,"Moderna",tmp$vax_cat_product)
# Add information to main data
tmp <- tmp[,c("patient_id","vax_cat_product")]
colnames(tmp) <- c("patient_id",paste0("vax_cat_product_",i))
df <- merge(df, tmp, by = "patient_id")
# Remove unnecessary vaccination product information
df[,paste0(c("vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i)] <- NULL
}
df <- df[,c("patient_id","exp_date_covid19_hospital","exp_date_covid19_confirmed")]
View(df)
df$exp_bin_covid19_hospital <- "no_infection"
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed),"non_hospitalised",df$exp_bin_covid19_hospital)
df$exp_bin_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=0 &
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed<29),"hospitalised",df$exp_bin_covid19_hospital)
View(df)
View(df)
# Load study definition output -------------------------------------------------
df <- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))], # Quality assurance
colnames(df)[grepl("vax_",colnames(df))])] # Vaccinations
# Remove JCVI age variables ----------------------------------------------------
df[,c("vax_jcvi_age_1","vax_jcvi_age_2")] <- NULL
# Convert dates to date format -------------------------------------------------
for (i in colnames(df)[grepl("_date",colnames(df))]) {
df[,i] <- as.Date(df[,i])
}
# Convert numbers to number format ---------------------------------------------
df$qa_num_birth_year <- format(df$qa_num_birth_year,"%Y")
for (i in colnames(df)[grepl("_num",colnames(df))]) {
df[,i] <- as.numeric(df[,i])
}
# Convert categories to factor format ------------------------------------------
for (i in colnames(df)[grepl("_cat",colnames(df))]) {
df[,i] <- as.factor(df[,i])
}
# Convert binaries to logical format -------------------------------------------
for (i in colnames(df)[grepl("_bin",colnames(df))]) {
df[,i] <- as.logical(df[,i])
}
# Generate vaccine variables ---------------------------------------------------
for (i in 1:3) {
# Restrict to relevant columns and rename
tmp <- df[,c("patient_id",paste0(c("vax_date_covid_","vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i))]
colnames(tmp) <- c("patient_id","vax_date_covid","vax_date_AstraZeneca","vax_date_Pfizer","vax_date_Moderna")
# Determine vaccination product
tmp$vax_cat_product <- NA
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid==tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"AstraZeneca",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid==tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"Pfizer",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid==tmp$vax_date_Moderna,"Moderna",tmp$vax_cat_product)
# Add information to main data
tmp <- tmp[,c("patient_id","vax_cat_product")]
colnames(tmp) <- c("patient_id",paste0("vax_cat_product_",i))
df <- merge(df, tmp, by = "patient_id")
# Remove unnecessary vaccination product information
df[,paste0(c("vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i)] <- NULL
}
# Define severity --------------------------------------------------------------
df$exp_cat_covid19_hospital <- "no_infection"
df$exp_cat_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed),"non_hospitalised",df$exp_bin_covid19_hospital)
df$exp_cat_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=0 &
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed<29),"hospitalised_within28days",df$exp_bin_covid19_hospital)
df$exp_cat_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=29),"hospitalised_after28days",df$exp_bin_covid19_hospital)
# Load study definition output -------------------------------------------------
df <- arrow::read_feather(file = "output/input.feather")
# Specify columns to keep ------------------------------------------------------
df <- df[,c("patient_id","death_date",
colnames(df)[grepl("exp_",colnames(df))], # Exposures
colnames(df)[grepl("out_",colnames(df))], # Outcomes
colnames(df)[grepl("cov_",colnames(df))], # Covariates
colnames(df)[grepl("qa_",colnames(df))], # Quality assurance
colnames(df)[grepl("vax_",colnames(df))])] # Vaccinations
# Remove JCVI age variables ----------------------------------------------------
df[,c("vax_jcvi_age_1","vax_jcvi_age_2")] <- NULL
# Convert dates to date format -------------------------------------------------
for (i in colnames(df)[grepl("_date",colnames(df))]) {
df[,i] <- as.Date(df[,i])
}
# Convert numbers to number format ---------------------------------------------
df$qa_num_birth_year <- format(df$qa_num_birth_year,"%Y")
for (i in colnames(df)[grepl("_num",colnames(df))]) {
df[,i] <- as.numeric(df[,i])
}
# Convert categories to factor format ------------------------------------------
for (i in colnames(df)[grepl("_cat",colnames(df))]) {
df[,i] <- as.factor(df[,i])
}
# Convert binaries to logical format -------------------------------------------
for (i in colnames(df)[grepl("_bin",colnames(df))]) {
df[,i] <- as.logical(df[,i])
}
# Generate vaccine variables ---------------------------------------------------
for (i in 1:3) {
# Restrict to relevant columns and rename
tmp <- df[,c("patient_id",paste0(c("vax_date_covid_","vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i))]
colnames(tmp) <- c("patient_id","vax_date_covid","vax_date_AstraZeneca","vax_date_Pfizer","vax_date_Moderna")
# Determine vaccination product
tmp$vax_cat_product <- NA
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid==tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"AstraZeneca",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid==tmp$vax_date_Pfizer &
tmp$vax_date_covid!=tmp$vax_date_Moderna,"Pfizer",tmp$vax_cat_product)
tmp$vax_cat_product <- ifelse(!is.na(tmp$vax_date_covid) &
tmp$vax_date_covid!=tmp$vax_date_AstraZeneca &
tmp$vax_date_covid!=tmp$vax_date_Pfizer &
tmp$vax_date_covid==tmp$vax_date_Moderna,"Moderna",tmp$vax_cat_product)
# Add information to main data
tmp <- tmp[,c("patient_id","vax_cat_product")]
colnames(tmp) <- c("patient_id",paste0("vax_cat_product_",i))
df <- merge(df, tmp, by = "patient_id")
# Remove unnecessary vaccination product information
df[,paste0(c("vax_date_AstraZeneca_","vax_date_Pfizer_","vax_date_Moderna_"),i)] <- NULL
}
# Define severity --------------------------------------------------------------
df$exp_cat_covid19_hospital <- "no_infection"
df$exp_cat_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed),"non_hospitalised",df$exp_bin_covid19_hospital)
df$exp_cat_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=0 &
df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed<29),"hospitalised_within28days",df$exp_cat_covid19_hospital)
df$exp_cat_covid19_hospital <- ifelse(!is.na(df$exp_date_covid19_confirmed) &
!is.na(df$exp_date_covid19_hospital) &
(df$exp_date_covid19_hospital-df$exp_date_covid19_confirmed>=29),"hospitalised_after28days",df$exp_cat_covid19_hospital)
# Specify columns to keep ------------------------------------------------------
View(df)
source('~/Documents/post-covid-vaccinated/analysis/00-preprocess_data.R')
source('~/Documents/post-covid-vaccinated/analysis/00-preprocess_data.R')
View(df)
table(df$exp_cat_covid19_hospital)
